// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: customers.sql

package repository

import (
	"context"
	"time"
)

const createCustomers = `-- name: CreateCustomers :exec
INSERT INTO customers (
  id,
  nik,
  hashed_password,
  email,
  full_name,
  legal_name,
  tempat_lahir,
  tanggal_lahir,
  gaji,
  photo_ktp,
  foto_selfie
) VALUES (
  ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateCustomersParams struct {
	ID             string    `json:"id"`
	Nik            string    `json:"nik"`
	HashedPassword string    `json:"hashed_password"`
	Email          string    `json:"email"`
	FullName       string    `json:"full_name"`
	LegalName      string    `json:"legal_name"`
	TempatLahir    string    `json:"tempat_lahir"`
	TanggalLahir   time.Time `json:"tanggal_lahir"`
	Gaji           float64   `json:"gaji"`
	PhotoKtp       string    `json:"photo_ktp"`
	FotoSelfie     string    `json:"foto_selfie"`
}

func (q *Queries) CreateCustomers(ctx context.Context, arg CreateCustomersParams) error {
	_, err := q.db.ExecContext(ctx, createCustomers,
		arg.ID,
		arg.Nik,
		arg.HashedPassword,
		arg.Email,
		arg.FullName,
		arg.LegalName,
		arg.TempatLahir,
		arg.TanggalLahir,
		arg.Gaji,
		arg.PhotoKtp,
		arg.FotoSelfie,
	)
	return err
}

const getCustomers = `-- name: GetCustomers :one
SELECT id, nik, hashed_password, email, full_name, legal_name, tempat_lahir, tanggal_lahir, gaji, photo_ktp, foto_selfie FROM customers
WHERE email = ? LIMIT 1
`

func (q *Queries) GetCustomers(ctx context.Context, email string) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomers, email)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Nik,
		&i.HashedPassword,
		&i.Email,
		&i.FullName,
		&i.LegalName,
		&i.TempatLahir,
		&i.TanggalLahir,
		&i.Gaji,
		&i.PhotoKtp,
		&i.FotoSelfie,
	)
	return i, err
}
