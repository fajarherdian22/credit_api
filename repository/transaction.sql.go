// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: transaction.sql

package repository

import (
	"context"
	"time"
)

const createTransaction = `-- name: CreateTransaction :exec
INSERT INTO ` + "`" + `transaction` + "`" + ` (
  id,
  customer_id,
  product_name,
  price,
  bunga,
  jumlah_cicilan,
  tenor,
  admin_fee,
  created_at
) VALUES (
  ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateTransactionParams struct {
	ID            string    `json:"id"`
	CustomerID    string    `json:"customer_id"`
	ProductName   string    `json:"product_name"`
	Price         float64   `json:"price"`
	Bunga         float64   `json:"bunga"`
	JumlahCicilan float64   `json:"jumlah_cicilan"`
	Tenor         int32     `json:"tenor"`
	AdminFee      float64   `json:"admin_fee"`
	CreatedAt     time.Time `json:"created_at"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) error {
	_, err := q.db.ExecContext(ctx, createTransaction,
		arg.ID,
		arg.CustomerID,
		arg.ProductName,
		arg.Price,
		arg.Bunga,
		arg.JumlahCicilan,
		arg.Tenor,
		arg.AdminFee,
		arg.CreatedAt,
	)
	return err
}

const getTransaction = `-- name: GetTransaction :one
SELECT id, customer_id, product_name, price, bunga, jumlah_cicilan, tenor, admin_fee, created_at FROM ` + "`" + `transaction` + "`" + `
WHERE id = ?
`

func (q *Queries) GetTransaction(ctx context.Context, id string) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransaction, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.ProductName,
		&i.Price,
		&i.Bunga,
		&i.JumlahCicilan,
		&i.Tenor,
		&i.AdminFee,
		&i.CreatedAt,
	)
	return i, err
}
